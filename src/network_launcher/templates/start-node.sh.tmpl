BINARY="{{ .Binary }}"
CONFIG_FOLDER="{{ .ConfigFolder }}"
# The Thornode *home* directory is the parent of CONFIG_FOLDER
THORNODE_ARGS="{{ .ThorNodeArgs }}"
SEED_OPTIONS="{{ .SeedOptions }}"
MNEMONIC="{{ .Mnemonic }}"
NODE_NAME="{{ .NodeName }}"

echo "Starting Thorchain node: $NODE_NAME"

# Import the validator key
printf '%s\n\n\n\n' "$MNEMONIC" | $BINARY keys add validator --recover --keyring-backend test

# Initialize the node with the mnemonic (without forking args)
# For forking mode, use the generated validator mnemonic, otherwise use template mnemonic
if [ -f "/tmp/validator_mnemonic.txt" ]; then
    VALIDATOR_MNEMONIC=$(cat /tmp/validator_mnemonic.txt)
    echo "$VALIDATOR_MNEMONIC" | $BINARY init "$NODE_NAME" --recover
else
    echo "$MNEMONIC" | $BINARY init "$NODE_NAME" --recover
fi

# Handle genesis file setup - either copy template genesis or apply forking patches
mkdir -p "$CONFIG_FOLDER"

# Debug: List all files in /tmp to see what's available
echo "DEBUG: Files in /tmp:"
ls -la /tmp/
echo "DEBUG: Files in /tmp/patch (if exists):"
ls -la /tmp/patch/ 2>/dev/null || echo "No /tmp/patch directory"

if [ -f "/tmp/patch_script/forking_mode.txt" ]; then
    echo "Applying genesis patches for forking mode..."
    
    # Verify original genesis file exists
    if [ ! -f /tmp/genesis.json ]; then
        echo "ERROR: Original genesis file not found at /tmp/genesis.json"
        exit 1
    fi
    
    echo "Original genesis file found - size: $(wc -c < /tmp/genesis.json) bytes"
    
    # Use streaming approach to avoid memory issues with large genesis file
    echo "Using streaming approach for mainnet genesis patching..."
    
    # Generate validator keys for mainnet genesis patching
    echo "Generating validator keys for mainnet genesis..."
    # Use the existing validator key that was already created
    VALIDATOR_ADDRESS=$(thornode keys show validator --keyring-backend test --address)
    VALIDATOR_SECP_PK=$(thornode keys show validator --keyring-backend test --pubkey | thornode pubkey)
    VALIDATOR_ED_PK=$(thornode tendermint show-validator | thornode pubkey)
    VALIDATOR_CONS_PK=$(thornode tendermint show-validator | thornode pubkey --bech cons)
    
    echo "Validator address: $VALIDATOR_ADDRESS"
    echo "Validator secp256k1 pubkey: $VALIDATOR_SECP_PK"
    echo "Validator ed25519 pubkey: $VALIDATOR_ED_PK"
    echo "Validator consensus pubkey: $VALIDATOR_CONS_PK"
    
    # Create a minimal working genesis file by extracting essential data from mainnet
    echo "Creating minimal working genesis from mainnet data..."
    
    # Start with template genesis structure but import essential mainnet data
    cat > /tmp/genesis_working.json << 'EOF'
{
  "app_version": "{{ .AppVersion }}",
  "genesis_time": "{{ .GenesisTime }}",
  "chain_id": "{{ .ChainId }}",
  "initial_height": "{{ .InitialHeight }}",
  "consensus": {},
  "app_state": {
    "auth": {
      "params": {
        "max_memo_characters": "256",
        "tx_sig_limit": "7",
        "tx_size_cost_per_byte": "10",
        "sig_verify_cost_ed25519": "590",
        "sig_verify_cost_secp256k1": "1000"
      },
      "accounts": []
    },
    "authz": {
      "authorization": []
    },
    "bank": {
      "params": {
        "send_enabled": [],
        "default_send_enabled": true
      },
      "balances": [],
      "supply": [],
      "denom_metadata": [],
      "send_enabled": []
    },
    "denom": {
      "admins": []
    },
    "genutil": {
      "gen_txs": []
    },
    "mint": {
      "minter": {
        "inflation": "0.130000000000000000",
        "annual_provisions": "0.000000000000000000"
      },
      "params": {
        "mint_denom": "rune",
        "inflation_rate_change": "0.130000000000000000",
        "inflation_max": "0.200000000000000000",
        "inflation_min": "0.070000000000000000",
        "goal_bonded": "0.670000000000000000",
        "blocks_per_year": "6311520"
      }
    },
    "thorchain": {
      "node_accounts": [],
      "pools": [],
      "liquidity_providers": [],
      "network_fees": [],
      "observed_tx_in_hashes": [],
      "observed_tx_out_hashes": [],
      "tx_outs": [],
      "keygen_blocks": [],
      "keygens": [],
      "errata_tx_ids": [],
      "mimir": {},
      "network_fee_voters": [],
      "observed_network_fee_voters": [],
      "node_pause_chain_blocks": [],
      "tss_voters": [],
      "tss_keysign_fail_voters": [],
      "ban_voters": [],
      "node_accounts_preflights": [],
      "vaults": [],
      "reserve": "0",
      "last_churn_height": "0",
      "last_sign_height": "0",
      "ragnarok_withdrawing_txs": [],
      "ragnarok_pending": false,
      "emit_pool_rune": "0",
      "pool_ragnarok": false,
      "switch_block_height": "0",
      "streaming_swaps": [],
      "trade_accounts": [],
      "trade_units": [],
      "order_book_items": [],
      "order_book_processors": [],
      "rune_providers": [],
      "affiliate_fee_collectors": []
    },
    "upgrade": {},
    "wasm": {
      "params": {
        "code_upload_access": {
          "permission": "Everybody",
          "addresses": []
        },
        "instantiate_default_permission": "Everybody"
      },
      "codes": [],
      "contracts": [],
      "sequences": []
    }
  }
}
EOF
    
    # Apply consensus block patch
    echo "Applying consensus block patch..."
    jq --slurpfile consensus /tmp/templates/consensus.json '.consensus = $consensus[0]' /tmp/genesis_working.json > /tmp/genesis_temp.json && mv /tmp/genesis_temp.json /tmp/genesis_working.json
    
    # Apply node_accounts patch
    echo "Applying node_accounts patch..."
    jq --arg bond "{{ .BondAmount }}" \
       --arg addr "$VALIDATOR_ADDRESS" \
       --arg ed_pk "$VALIDATOR_ED_PK" \
       --arg secp_pk "$VALIDATOR_SECP_PK" \
       --arg cons_pk "$VALIDATOR_CONS_PK" \
       --arg version "{{ .AppVersion }}" \
       '.app_state.thorchain.node_accounts = [{
         "active_block_height": "0",
         "bond": $bond,
         "bond_address": $addr,
         "node_address": $addr,
         "pub_key_set": {
           "ed25519": $ed_pk,
           "secp256k1": $secp_pk
         },
         "signer_membership": [],
         "status": "Active",
         "validator_cons_pub_key": $cons_pk,
         "version": $version
       }]' /tmp/genesis_working.json > /tmp/genesis_temp.json && mv /tmp/genesis_temp.json /tmp/genesis_working.json
    
    # Apply state block patch
    echo "Applying state block patch..."
    jq --slurpfile state /tmp/state/state.json '.app_state.auth = $state[0]' /tmp/genesis_working.json > /tmp/genesis_temp.json && mv /tmp/genesis_temp.json /tmp/genesis_working.json
    
    # Selectively import essential mainnet data without tthor addresses
    echo "Importing essential mainnet data (pools, mimir settings)..."
    
    # Import pools data (convert tthor to thor addresses)
    echo "Importing pools data..."
    jq -r '.app_state.thorchain.pools' /tmp/genesis.json | sed 's/tthor1/thor1/g' > /tmp/pools_converted.json
    jq --slurpfile pools /tmp/pools_converted.json '.app_state.thorchain.pools = $pools[0]' /tmp/genesis_working.json > /tmp/genesis_temp.json && mv /tmp/genesis_temp.json /tmp/genesis_working.json
    
    # Import mimir settings
    echo "Importing mimir settings..."
    jq '.app_state.thorchain.mimir' /tmp/genesis.json > /tmp/mimir_temp.json
    jq --slurpfile mimir /tmp/mimir_temp.json '.app_state.thorchain.mimir = $mimir[0]' /tmp/genesis_working.json > /tmp/genesis_temp.json && mv /tmp/genesis_temp.json /tmp/genesis_working.json
    
    # Import essential wasm codes and sequences (without contracts that have tthor addresses)
    echo "Importing wasm codes and sequences..."
    jq '.app_state.wasm.codes' /tmp/genesis.json > /tmp/codes_temp.json
    jq '.app_state.wasm.sequences' /tmp/genesis.json > /tmp/sequences_temp.json
    jq --slurpfile codes /tmp/codes_temp.json --slurpfile sequences /tmp/sequences_temp.json '.app_state.wasm.codes = $codes[0] | .app_state.wasm.sequences = $sequences[0]' /tmp/genesis_working.json > /tmp/genesis_temp.json && mv /tmp/genesis_temp.json /tmp/genesis_working.json
    
    echo "Final verification:"
    echo "Chain ID: $(jq -r '.chain_id' /tmp/genesis_working.json)"
    echo "Node accounts count: $(jq '.app_state.thorchain.node_accounts | length' /tmp/genesis_working.json)"
    echo "Pools count: $(jq '.app_state.thorchain.pools | length' /tmp/genesis_working.json)"
    echo "Wasm codes count: $(jq '.app_state.wasm.codes | length' /tmp/genesis_working.json)"
    echo "Genesis file size: $(wc -c < /tmp/genesis_working.json) bytes"
    
    # Copy the patched genesis to the thornode config directory
    echo "Copying patched genesis to thornode config directory..."
    cp /tmp/genesis_working.json "$CONFIG_FOLDER/genesis.json"
    
    echo "Genesis patching completed successfully!"
else
    echo "Using template genesis file..."
    cp /tmp/genesis/genesis.json "$CONFIG_FOLDER/genesis.json"
fi

# Configure node settings
# Force minimum-gas-prices to 0rune regardless of default
sed -i 's/^minimum-gas-prices = ".*"/minimum-gas-prices = "0rune"/' $CONFIG_FOLDER/app.toml
sed -i 's/^enable = false/enable = true/' $CONFIG_FOLDER/app.toml
sed -i 's/^swagger = false/swagger = true/' $CONFIG_FOLDER/app.toml

# Configure consensus settings
sed -i 's/^timeout_commit = "5s"/timeout_commit = "1s"/' $CONFIG_FOLDER/config.toml
sed -i 's/^timeout_propose = "3s"/timeout_propose = "1s"/' $CONFIG_FOLDER/config.toml

# Configure P2P settings
sed -i 's/^addr_book_strict = true/addr_book_strict = false/' $CONFIG_FOLDER/config.toml
sed -i 's/^external_address = ""/external_address = "0.0.0.0:26656"/' $CONFIG_FOLDER/config.toml

# Configure RPC settings
sed -i 's/^laddr = "tcp:\/\/127.0.0.1:26657"/laddr = "tcp:\/\/0.0.0.0:26657"/' $CONFIG_FOLDER/config.toml
sed -i 's/^cors_allowed_origins = \[\]/cors_allowed_origins = ["*"]/' $CONFIG_FOLDER/config.toml

# Configure gRPC settings
sed -i 's/^address = "localhost:9090"/address = "0.0.0.0:9090"/' $CONFIG_FOLDER/app.toml

# Configure API settings
sed -i 's/^address = "tcp:\/\/localhost:1317"/address = "tcp:\/\/0.0.0.0:1317"/' $CONFIG_FOLDER/app.toml
sed -i 's/^enabled-unsafe-cors = false/enabled-unsafe-cors = true/' $CONFIG_FOLDER/app.toml

# Configure Prometheus
sed -i 's/^prometheus = false/prometheus = true/' $CONFIG_FOLDER/config.toml
sed -i 's/^prometheus_listen_addr = ":26660"/prometheus_listen_addr = "0.0.0.0:26660"/' $CONFIG_FOLDER/config.toml

echo "Node configuration completed"

# Start the node with seed options if provided
if [ -n "$SEED_OPTIONS" ]; then
    echo "Starting node with seeds: $SEED_OPTIONS"
    exec printf 'validator0\nTestPassword!\n' | $BINARY start $SEED_OPTIONS $THORNODE_ARGS
else
    echo "Starting seed node (no seeds configured)"
    exec printf 'validator0\nTestPassword!\n' | $BINARY start $THORNODE_ARGS
fi
